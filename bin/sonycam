#!/usr/bin/env ruby

$:.unshift(File.join(File.dirname(__FILE__), '..', 'lib'))
require 'sony_camera_remote'
require 'yaml'
include SonyCameraRemote

config_file = File.join(ENV['HOME'], '.' << File.basename(__FILE__))

if File.exist?(config_file)
  config = YAML::load(File.read(config_file))
else
  config = {:verbose => true}
end

verbose = config[:verbose]
method = ARGV[0] || 'shoot'

begin
  camera_uris = config[:uris]

  if camera_uris.nil? || camera_uris.empty?
    # Discover and save endpoints
    camera_uris = Discovery::Client.new.discover.map do |device|
      if camera_service = device.services['camera']
        STDERR.puts "#{device.name} has camera service at #{camera_service.base_uri}." if verbose
        camera_service.base_uri.to_s
      else
        STDERR.puts "Error: #{device.name} has no camera service."
      end
    end.compact

    config[:uris] = camera_uris
    File.open(config_file, 'w'){|f| YAML.dump(config, f)}
  end

  camera_uris.each do |uri|
    puts Camera.new(uri).send(method)
  end
rescue
  STDERR.puts("Error: #{$!}")

  if verbose
    $!.backtrace.each do |b|
      STDERR.puts(b)
    end
  end
end
